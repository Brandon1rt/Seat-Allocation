focusedBorder: OutlineInputBorder(
                  borderSide: const BorderSide(width: 3, color: Colors.red),
                  borderRadius: BorderRadius.circular(15),
                )



Future SignIn() async {
    await FirebaseAuth.instance.SignInWithEmailAndPassword(
      email: _usernameController.text.trim(),
      password: _passwordController.text.trim(),
    );
  }


Exception has occurred.
PlatformException (PlatformException(null-error, Host platform returned null value for non-null return value., null, null))



class _AdminLoginState extends State<AdminLogin> {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final _formKey = GlobalKey<FormState>();

  @override
  void dispose() {
    _usernameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }



================================================================================


Creating an automated seating arrangement algorithm involves a bit more complexity. The following Flutter code provides a basic implementation of an automated seating arrangement algorithm based on register numbers. This example assumes that the seating arrangement should avoid placing students with consecutive register numbers next to each other.


import 'dart:math';

import 'package:flutter/material.dart';

class Student {
  int registerNumber;
  String name;

  Student({required this.registerNumber, required this.name});
}

class SeatingArrangement extends StatefulWidget {
  @override
  _SeatingArrangementState createState() => _SeatingArrangementState();
}

class _SeatingArrangementState extends State<SeatingArrangement> {
  List<Student> students = [
    Student(registerNumber: 101, name: 'Student1'),
    Student(registerNumber: 103, name: 'Student2'),
    // Add more students with register numbers
  ];

  int rows = 5;
  int columns = 5;

  List<List<Student?>> seatingArrangement = List.generate(
    5,
    (row) => List<Student?>.filled(5, null, growable: false),
  );

  @override
  void initState() {
    super.initState();
    generateSeatingArrangement();
  }

  void generateSeatingArrangement() {
    students.sort((a, b) => a.registerNumber.compareTo(b.registerNumber));

    // Create a shuffled copy of the students list to randomize seating
    List<Student> shuffledStudents = List.from(students);
    shuffledStudents.shuffle();

    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < columns; j++) {
        seatingArrangement[i][j] = shuffledStudents.removeAt(0);
      }
    }

    // Rearrange the seating to ensure consecutive register numbers are not together
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < columns - 1; j++) {
        if ((seatingArrangement[i][j]!.registerNumber + 1) ==
            seatingArrangement[i][j + 1]!.registerNumber) {
          // Swap students to avoid consecutive register numbers next to each other
          Student? temp = seatingArrangement[i][j];
          seatingArrangement[i][j] = seatingArrangement[i][j + 1];
          seatingArrangement[i][j + 1] = temp;
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Seating Arrangement'),
        ),
        body: GridView.builder(
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: columns,
          ),
          itemCount: rows * columns,
          itemBuilder: (context, index) {
            int row = index ~/ columns;
            int col = index % columns;
            Student? student = seatingArrangement[row][col];

            return Card(
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Center(
                  child: Text(
                    student != null
                        ? '${student.name}\n${student.registerNumber}'
                        : '',
                    textAlign: TextAlign.center,
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: SeatingArrangement(),
    );
  }
}


=========================================================================================================================================================


logout button of "Student home" navigate to "studentlogin"